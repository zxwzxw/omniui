#usda 1.0
(
    customLayerData = {
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            token enableDistanceDelay = "off"
            token enableDoppler = "off"
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
                double3 target = (0, 0, 0)
            }
            dictionary Perspective = {
                double3 position = (288.41608218172115, 237.96390012911345, 359.89108870823503)
                double radius = 518.5213995645761
                double3 target = (-2.979173065488273, 19.380942986323625, -9.127525825684856)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
                double3 target = (0, 0, 0)
            }
            dictionary Top = {
                double3 position = (-6.494670421766199e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
                double3 target = (0, 0, 0)
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary renderSettings = {
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.009999999776482582
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    def DistantLight "defaultLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float angle = 1
        float intensity = 3000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        float3 xformOp:rotateZYX = (315, 0, 0)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX"]
    }

    def Scope "Looks"
    {
        def Material "OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                token outputs:out
            }
        }

        def Material "OmniGlass"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniGlass/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniGlass/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniGlass/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                token outputs:out
            }
        }
    }

    def Mesh "Cube"
    {
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 4, 5, 1, 4, 0, 2, 6, 5, 4, 6, 7, 1, 5, 7, 3, 0, 1, 3, 2, 3, 7, 6, 2]
        rel material:binding = </World/Looks/OmniPBR> (
            bindMaterialAs = "weakerThanDescendants"
        )
        normal3f[] normals = [(0, -1, 0), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0), (0, 1, 0)] (
            interpolation = "faceVarying"
        )
        point3f[] points = [(-50, -50, -50), (-50, -50, 50), (-50, 50, -50), (-50, 50, 50), (50, -50, -50), (50, -50, 50), (50, 50, -50), (50, 50, 50)]
        float2[] primvars:st = [(0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1), (0, 0), (1, 0), (1, 1), (0, 1)] (
            interpolation = "faceVarying"
        )
        uniform token subdivisionScheme = "none"
        double3 xformOp:rotateZYX = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }

    def Sphere "Sphere"
    {
        float3[] extent = [(-50, -50, -50), (50, 50, 50)]
        rel material:binding = </World/Looks/OmniGlass> (
            bindMaterialAs = "weakerThanDescendants"
        )
        double radius = 50
        custom bool refinementEnableOverride = 1
        custom int refinementLevel = 2
        double3 xformOp:rotateZYX = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 100, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateZYX", "xformOp:scale"]
    }
}

